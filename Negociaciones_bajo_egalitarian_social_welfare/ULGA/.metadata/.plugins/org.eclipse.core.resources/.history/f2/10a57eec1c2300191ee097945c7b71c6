package main;

import java.io.IOException;
import java.lang.management.MemoryPoolMXBean;
import java.lang.management.ThreadInfo;
import java.util.Scanner;
import java.util.Vector;

import javax.management.openmbean.OpenDataException;

import org.omg.CORBA.PRIVATE_MEMBER;

public class Engine {
	private final int average = 500;
	private final int maxGenerations = 100;
	private int preferenceIterations = 100;
	private final int populationSize = 100;
	private final int numUsers = 4;
	private FitnessCalc fitness = new FitnessCalc(this.numUsers, this.average);
	private Population myPop;
	Scanner sc = new Scanner(System.in);
	
	/**
	 * This method controls the flow of execution
	 * @throws IOException
	 */
	public void start() throws IOException {	
		String text = "49.647130575624146 62.0693916210501 20.311725158399835 5.015535509646004 60.5695568906112 96.73226257890249 51.27167387275276 85.85851069713642 43.965789422484285 69.93632209240774 39.30446166447569 95.91856857238835 74.87881059683673 15.94962707150301 74.01199388105806 18.743612482025494 79.05872775005729 40.796359170031856 76.17643725883522 3.3257104258101924 46.082172524396334 93.51618992731984 62.50548457506588 9.296986276808052 43.95667155266034 47.8765525132359 28.41439516707661 32.13498617060561 74.00573632735711 30.200528036954 51.91156418498715 24.244828410866546 49.333346443907836 20.28065684523349 7.454137789799646 84.2648726620582 7.0131887345577955 14.750335350516277 62.28381303749077 26.015946878696678 73.33841943719169 50.77958914722451 88.24019501650523 89.18112854691692 79.00193778600885 72.5508984176785 40.38020874633969 30.063833484423405 66.95503942093812 13.653326987583565 72.90677993009088 51.62643804688241 2.914057419005956 70.30961791133733 67.92865798508096 39.459940585902835 83.04994381664093 52.220993549335 76.43547477229242 94.37710344878042 57.30503894219034 67.77831819443966 72.57822437770061 48.957336361467924 18.034088949969632 55.44582365537943 93.89514941782406 7.600981799499514 5.263321126798397 39.27505637880807 84.51657780522876 38.4739896023576 64.80181071614894 29.75173643925378 99.61954711388451 19.14090740423685 25.72353560798835 91.51714711925315 27.484108183047546 98.69487934450413 30.366425125421877 29.938249529301128 75.4280345695291 69.79781111588606 40.96647399303802 52.02712418070886 37.66516188460655 64.24216485296111 52.360286373904884 20.83041835040616 82.74495779004305 50.4377374456999 85.84873771034802 99.12336313535984 51.686896236429135 34.6126311880491 26.31725997013382 66.05055975221939 23.2231044288528 17.497015477117802\r\n" + 
				"33.05500839854893 70.25706778730962 3.7062095225072778 19.83161562459454 30.405558489898347 77.04845463213789 44.226711839288626 22.20976322227421 82.41595961585271 60.207364597161025 16.315196928911682 41.522661870460325 99.02894248371994 63.27673934226495 95.27951200983784 5.631973289395439 81.08471595182532 94.39619811516002 93.745642236846 64.84208153948238 97.46421861981402 67.14824177003682 37.33325330280945 38.2863823664329 23.114903187552336 53.334753255087755 38.60296397785035 52.477685314767314 78.4530383244986 81.16193721418747 48.462214521096385 20.002340672018786 42.73318009661793 58.96314978768286 41.11013102263525 60.66086399507298 41.415938591787935 71.33427773291764 5.339123931479319 59.27493034836312 22.34928004311166 73.39507218914285 38.59197885657828 24.89126489525533 19.706614209590462 57.822587050910215 9.598008358055676 4.217498052262491 50.09650533921428 59.32911636625352 26.68042897403742 95.82326960976467 60.07437266314738 30.377260687516795 94.93937981098519 86.93187505988594 16.445636871511986 96.13852008173234 63.4710522334108 34.51348984348345 79.25275579987891 95.0094803577294 46.58329140260305 14.870468581695333 30.185255803935643 68.40103573550303 19.611451313619913 61.97851903601007 3.3422832043114035 85.01115501678511 91.42569140670906 5.514461460399376 91.8114066741381 53.38063076567414 43.051948108002186 38.762123291344295 26.405297679215497 72.21381899063483 74.00354156601794 58.44231501241055 61.119614180963374 83.72276178561177 58.93903423131811 12.961135155340674 57.440872944880525 71.1232121024511 5.1241985762896975 20.612838001966065 89.54218076699804 65.37492616106627 15.882026957017521 51.90922121355815 23.657763215047975 25.316230193779585 43.76450198629375 55.43698479126046 29.52376622974668 61.494205426621406 40.57345440753582 69.46778483905005\r\n" + 
				"49.713346647747045 2.236993816341218 76.59504752672336 61.96264934378833 20.97819490560854 88.85353743776233 83.4935923993627 88.62320382941431 52.33654749280733 52.2787507845663\r\n" + 
				"29.056817716324467 38.036868949576046 48.490003779979226 20.018182678596034 98.96797247690519 6.48036152528182 7.410992829155004 45.6347435953684 1.0590527507945433 88.09231355978825";
		System.out.println(text.replace(".", ","));
		System.out.println("    (1) Read data \n" + "    (2) Gerenate new data");
		int op = this.sc.nextInt();
		if(op == 1) {
			System.out.println("Do you wanna analyze the data? \n" +  "    (1) Yes \n" +  "    (2) No");
			op = this.sc.nextInt();
			if(op == 1) {
				readPopulation();
			}else
				System.out.println("Bye!");
		}else 
			generatePopulation();
	}
	
	/**
	 * Read population from file and execute GA
	 * @throws IOException
	 */
	public void readPopulation() throws IOException {
		this.fitness.readPreferences();
		this.fitness.readPreferences2();
		double variation = 1;
		for(int i = 0; i < preferenceIterations; i++) {
			this.fitness.resetValues(average, numUsers);
			this.fitness.resetPopulations(average);
			for(int j = 0; j < average; j++) {
		    	this.myPop = new Population(this.populationSize, this.fitness.getNumUsers(), false);
		    	int generationCount = 0;
				while (generationCount < this.maxGenerations) {
			        generationCount++;
			        this.myPop = Algorithm.evolvePopulation(this.myPop);  
			    }
			    this.fitness.calculateMutationPopulation(this.myPop.getFittest(), i, j);
				this.fitness.calculateMutationDistribution(j);
			}
			this.fitness.writeDistribution(this.myPop.getFittest(), average, i);
			/* Modificación de recursos */
			//this.fitness.setValueBaja(0, 6, variation);
		}
		System.out.println("To be continued...");
	}
	
	/**
	 * Generate a new Population to files
	 * @throws IOException
	 */
	public void generatePopulation() throws IOException {
		System.out.println("ATENTION, new data will be generate. Press ENTER to continue");
		this.sc.nextLine(); this.sc.nextLine();
	    Population myPop = new Population(this.populationSize, this.fitness.getNumUsers(), true);
		this.fitness.randomPreferences();
		this.fitness.writePreferences();
		System.out.println("Data generated");
	}
}

