package main;

import java.io.IOException;
import java.nio.file.FileAlreadyExistsException;
import java.util.Arrays;
import java.util.Random;
import java.util.zip.ZipEntry;

public class Algorithm {

    private static final double uniformRate = 0.5;
    private static final double mutationRate = 0.01;
    private static final boolean elitism = true;
    private static final double value = 90;

    /**
     * Evolves population
     * @param popEvolved
     * @param popSize
     * @return
     */
    public static Population evolvePopulation(Population popEvolved, int popSize) {
        // Keep our best individual
        if (elitism)
        	popEvolved.saveIndividual(0, popEvolved.getFittest()); 
        
        // Is it elitism?
        int elitismOffset;
        if (elitism)
            elitismOffset = 1;
        else
            elitismOffset = 0;
        
        
        /*for(int i = 0; i < popSize; i++){
        	System.out.println("Ite: " + i + " Fitness: " + popEvolved.getIndividual(i).getOnlyFitness() + " ¦ Genes: " + popEvolved.getIndividual(i).toString());
        }*/
        
        // Bubble Sort
    	Individual temp1 = new Individual();
        for(int i = 0; i < popSize-1; i++){
        	for(int j = 0; j < (popSize-i-1); j++) {
        		if(popEvolved.getIndividual(j+1).getOnlyFitness() > popEvolved.getIndividual(j).getOnlyFitness()) {
        			temp1 = popEvolved.getIndividual(j);
        			popEvolved.saveIndividual(j, popEvolved.getIndividual(j+1));
        			popEvolved.saveIndividual(j+1, temp1);
        		}
        	}
        }

        // Almacenar índices y probabilidades asociadas
    	WeightedRandomSelect<String> indexes = new WeightedRandomSelect<>();
        double newValue = value;
        for(int i = 0; i < popSize; i++){
        	newValue = newValue-(newValue*0.8);
         	indexes.addEntry(i,  newValue);
        }

        // Construir la nueva población ya cruzada
    	Random random = new Random();
        Population newPop = new Population(popSize);
        for(int i = 0; i < newPop.size(); i++){
        	//Individual indiv1 = popEvolved.getIndividual(random.nextInt((popSize-1) - 0) + 0); // Selección random se la vieja población
        	Individual indiv1 = popEvolved.getIndividual(indexes.getRandom()); // Selección ponderada según valor fitness
        	Individual indiv2 = popEvolved.getIndividual(indexes.getRandom()); // Selección ponderada según valor fitness
            // Crossover probability
            if (Math.random() <= uniformRate) {
            	Individual newIndiv = crossover(indiv1, indiv2);
        		newPop.saveIndividual(i, newIndiv);
            } else {
        		newPop.saveIndividual(i, popEvolved.getIndividual(indexes.getRandom()));
            }
        }
        
        newPop.getFittest(); // Calcular valores fitness de la población cruzada
        
        /*for(int i = 0; i < newPop.size(); i++){
        	System.out.println("Ite: " + i + " Fitness: " + newPop.getIndividual(i).getOnlyFitness() + " ¦ Genes: " + newPop.getIndividual(i).toString());
        }*/
        
        // Bubble Sort
    	Individual temp2 = new Individual();
        for(int i = 0; i < newPop.size()-1; i++){
        	for(int j = 0; j < (newPop.size()-i-1); j++) {
        		if(newPop.getIndividual(j+1).getOnlyFitness() > newPop.getIndividual(j).getOnlyFitness()) {
        			temp2 = newPop.getIndividual(j);
        			newPop.saveIndividual(j, newPop.getIndividual(j+1));
        			newPop.saveIndividual(j+1, temp2);
        		}
        	}
        }
        
        /*for(int i = 0; i < newPop.size(); i++){
        	System.out.println("Ite: " + i + " Fitness: " + newPop.getIndividual(i).getOnlyFitness() + " ¦ Genes: " + newPop.getIndividual(i).toString());
        }*/

        
        /*newPop.saveIndividual(0, popEvolved.getIndividual(0));
        
        // Loop over the population size and create new individuals doing crossover
        Boolean[] taken = new Boolean[popSize];
        Arrays.fill(taken, Boolean.FALSE);
        for (int i = elitismOffset; i < popSize; i++) {
        	int indexIndiv1 = (int) Math.floor(Math.random()*((popSize-1)-0+1)+0);
        	if(taken[indexIndiv1] == true) {
        		while(taken[indexIndiv1] == true) {
        			indexIndiv1++;
        			if(indexIndiv1 == taken.length) {
        				indexIndiv1 = 0;
        			}
        		}
        	}
        	taken[indexIndiv1] = true;
        	
        	int indexIndiv2 = (int) Math.floor(Math.random()*((popSize-1)-0+1)+0);
        	if(taken[indexIndiv2] == true) {
        		while(taken[indexIndiv2] == true) {
        			indexIndiv2++;
        			if(indexIndiv2 == taken.length) {
        				indexIndiv2 = 0;
        			}
        		}
        	}
        	taken[indexIndiv2] = true;
        	
        	Individual indiv1 = popEvolved.getIndividual(indexIndiv1);
        	Individual indiv2 = popEvolved.getIndividual(indexIndiv2);
        	Individual newIndiv = crossover(indiv1, indiv2);
			newPop.saveIndividual(i, newIndiv);
			
			if(i == popSize/2) {
		        Arrays.fill(taken, Boolean.FALSE);
			}
        }
        
        newPop.saveIndividual(0, newPop.getFittest()); // Metemos el Fittest de la newPop en la posición 0


        */

        Population definitivePop = new Population(popSize);
        // Por orden, hacemos que compitan (esto no sesga nada porque la elección del cruzamiento ha sido aleatoria)
        for (int i = 1; i < newPop.size(); i++) {
        	if(newPop.getIndividual(i).getOnlyFitness() > popEvolved.getIndividual(i).getOnlyFitness())
        		definitivePop.saveIndividual(i, newPop.getIndividual(i));
        	else
        		definitivePop.saveIndividual(i, popEvolved.getIndividual(i));
        }
        
        // El fittest solo se calcula al comienzo, y después se mantiene hasta la siguiente evolución
        // Por lo tanto debemos guardarlo al retornar la nueva población
        Individual best = copyIndiv(popEvolved.getIndividual(0));
        definitivePop.setBest(best);
        
        // Mutate population
        for (int i = elitismOffset; i < definitivePop.size(); i++)
            mutate(definitivePop.getIndividual(i));
        
        // Metemos nuevamente el fittest
        definitivePop.saveIndividual(0, best);

        return definitivePop;
    }
    
    /**
     * It mades the copy of an individual
     * @param fittest
     * @return
     */
    public static Individual copyIndiv(Individual fittest){
    	Individual best = new Individual();
        best.setFitness(fittest.getOnlyFitness());
        for(int i = 0; i < fittest.size(); i++)
        	best.setGeneCopy(i, fittest.getGene(i));
    	return best;
    }

    /**
     * Crossover individuals
     * @param indiv1
     * @param indiv2
     * @return
     */
    private static Individual crossover(Individual indiv1, Individual indiv2) {
        Individual newSol = new Individual();
        // Loop through genes
        for (int i = 0; i < indiv1.size(); i++) {
            // Crossover
            if (Math.random() <= uniformRate)
                newSol.setGene(i, indiv1.getGene(i));
            else
                newSol.setGene(i, indiv2.getGene(i));
        }
        return newSol;
    }

    /**
     * Mutate an individual
     * @param indiv
     */
    private static void mutate(Individual indiv) {
        // Loop through genes
    	int gene;
        for (int i = 0; i < indiv.size(); i++) {
            if (Math.random() <= uniformRate)
            	gene = 0;
            else 
            	gene = 1;
            indiv.setGene(i, gene);
        }
    }
}