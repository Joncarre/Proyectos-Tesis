package main;

import java.awt.Image;
import java.awt.KeyEventPostProcessor;
import java.awt.RenderingHints;
import java.io.IOException;
import java.nio.channels.ScatteringByteChannel;
import java.util.Random;
import java.util.Scanner;
import java.util.Vector;

import javax.security.auth.kerberos.KerberosKey;

import data.CustomReadFile;
import data.CustomWriteFile;

public class FitnessCalc {
	private static Vector<Vector<Double>> M_preferences;
	private static Vector<Vector<Double>> O_preferences;
	private static Vector<Double> Temporal_preferences; 
	private static Vector<Integer> changedResources;
	static int numUsers;
	private int maxValuePreference;
	private int minValuePreference;
	private Vector<Individual> indiv_Results;
	private Vector<Individual> M_population;
	private CustomReadFile readFile;
	private CustomReadFile readFile2;
	private CustomWriteFile writeFile;
	Scanner sc;
	Scanner sc2;
	
	/**
	 * Constructor
	 * @param _numUser
	 * @param _numPacks
	 */
	public FitnessCalc(int _numUser) {
		this.numUsers = _numUser;
		this.M_preferences = new Vector<Vector<Double>>(this.numUsers);
		this.O_preferences = new Vector<Vector<Double>>(this.numUsers);
		this.changedResources = new Vector<Integer>(Individual.defaultGeneLength);
	}
	
	/**
	 * Reads M preferences
	 * @param index
	 * @param newPreference
	 * @throws IOException 
	 */
    public void readMPreferences() throws IOException {
        // Set a user preferences for each resource
        for (int i = 0; i < numUsers; i++) {
    		this.readFile = new CustomReadFile("agent" + i + ".txt");
        	this.sc = new Scanner((Readable) this.readFile);
        	Vector<Double> newPreference = this.readFile.readVector(sc);
        	M_preferences.add(i, newPreference);
        }
    }
    
    /**
     * Reads O preferences
     * @throws IOException
     */
    public void readOPreferences() throws IOException {
    	this.readFile = new CustomReadFile("agent0_real.txt");
        this.sc = new Scanner((Readable) this.readFile);
        Vector<Double> newPreference = this.readFile.readVector(sc);
        O_preferences.add(0, newPreference);
    }
   
    /**
     * Writes preferences for each user except Agent 0
     * @throws IOException
     */
    public void writePreferences(int iteration) throws IOException {
		String text = "";
		this.writeFile = new CustomWriteFile("Ite_" + iteration + ".txt");
		for(int i = 1; i < numUsers; i++) {
			for(int j = 0; j < Individual.defaultGeneLength; j++)
				text += M_preferences.get(i).get(j) + " ";
			if(i != numUsers-1)
				text += "\n";	
		}
		this.writeFile.writeVector(this.writeFile, text);
		this.writeFile.closeWriteFile(this.writeFile);
    }

    /**
     * Calculate individuals fitness
     * @param individual
     * @return
     */
    public static double getFitness(Individual individual) {
    	// The assignments for each resource is a vector of numUsers positions
    	double[] assignments = new double[numUsers];
        // Loop through our individuals genes
        for (int i = 0; i < Individual.defaultGeneLength; i++) {
        	 for(int j = 0; j < numUsers; j++) {
        		 assignments[j] += individual.getGene(i) * M_preferences.get(j).get(i); 
        	 }
        }
        return getMinValue(assignments); 
    }
    
    /**
     * Return of minimum value
     * @param vector
     * @return
     */
    public static double getMinValue(double[] vector) {
    	double min = Integer.MAX_VALUE;
    	for(int i = 0; i < vector.length; i++) {
    		if(vector[i] < min)
    			min = vector[i];
    	}
    	return min;
    }
    
    /**
     * Get number of users
     * @return
     */
    public int getNumUsers() {
    	return numUsers;
    }
    
    /**
     * resetValues
     */
    public void resetValues() {
    	this.indiv_Results = new Vector<Individual>();
		this.M_preferences = new Vector<Vector<Double>>(this.numUsers);
		this.O_preferences = new Vector<Vector<Double>>(this.numUsers);
    }
    
    /**
     * Reset matrix of populations
     * @param cols
     */
    public void resetPopulations(int popSize) {
    	this.M_population = new Vector<Individual>(popSize);
    }
    
    /** 
     * Write to file all results
     * @param numIterations
     * @param preference
     * @throws 
     */
    public double updateBestFitness() throws IOException {
		// Elegimos el mejor individuo de la población
    	Individual best = new Individual();
    	best = getBestIndividual();
		//System.out.println("----> Fittest of AGI: " + best.getOnlyFitness() + "  |  " + best.toString());
		// Calculamos el fitness del Agente 0 con las preferencias originales
    	double fitness = 0.0;
        for(int i = 0; i < O_preferences.get(0).size(); i++) {
			fitness += best.getGene(i) * O_preferences.get(0).get(i); 
        }
		//System.out.print(TotalFitness.replace(".", ",") + " " + best.toString());
        //System.out.println(TotalFitness.replace(".", ","));
		return fitness;
    }
	
    public void saveIndividuals(Individual individual) {
    	this.indiv_Results.add(individual);
    }
    
    public Individual getBestIndividual() {
    	Individual best = new Individual();
    	best = this.indiv_Results.get(0);
    	for(int i = 0; i < this.indiv_Results.size(); i++) {
    		if(this.indiv_Results.get(i).getOnlyFitness() > best.getOnlyFitness()) {
    			best = this.indiv_Results.get(i);
    		}
    	}
    	return best;
    }
    
    public void printOPreferences(){
    	System.out.println(O_preferences.get(0).toString());
    }
    
    public void printMPreferences(){
    	System.out.println(M_preferences.get(0).toString());
    	System.out.println(M_preferences.get(1).toString());
    	System.out.println(M_preferences.get(9).toString());
    }
    
    /**
     * Apply Normal Distribution to preferences
     * @param deviation
     */
    public void applyNormal(double deviation) {
    	Normal normal = new Normal();
    	// For each user (except the first)
    	for(int i = 1; i < this.numUsers; i++) {
    		// For each preference
    		for(int j = 0; j < Individual.defaultGeneLength; j++) {
    			Double mean = M_preferences.get(i).get(j);
    			Double newValue = normal.generateValue(deviation, mean);
    			while(newValue <= -999 || newValue >= 1000)
        			newValue = normal.generateValue(deviation, mean);
        		M_preferences.get(i).set(j, newValue);
    		}
    		/*formalizePreferences(M_preferences.get(i));*/ // Formalizamos después de aplicar la Normal
    	}
    }

    /**
     * This method formalizes the preferences by making them all add a number n (in our case it will be 100)
     * @throws IOException 
     */
    /*
    public Vector<Double> formalizePreferences(Vector<Double> preference) {
    	double aux = 0;
    	for(int i = 0; i < preference.size(); i++)
    		aux += preference.get(i);
    	aux = 100/aux;
    	for(int j = 0; j < preference.size(); j++)
    		preference.set(j, preference.get(j)*aux);
    	return preference;
    }
    
    public void formalizeMutationPreferences() {
    	M_preferences.set(0, formalizePreferences(M_preferences.get(0)));
    }
    */
    
    /**
     * Lee las instancias desde fichero
     * @param iteration
     * @throws IOException
     */
	public void readPlusMPreferences(int iteration) throws IOException {
		this.readFile = new CustomReadFile("Ite_" + iteration + ".txt");
		this.sc = new Scanner((Readable) this.readFile);
		int i = 0;
		// Cogemos la preferencia del Agent 0 de su fichero
		this.readFile2 = new CustomReadFile("agent0.txt");
    	this.sc2 = new Scanner((Readable) this.readFile2);
    	Vector<Double> preferenceAgent0 = this.readFile2.readVector(this.sc2);
        M_preferences.add(i, preferenceAgent0);
		i++;	
		while(this.sc.hasNextLine()) {
				Scanner vectorReader = new Scanner(this.sc.nextLine());
				Vector<Double> newPreference = new Vector<Double>();
				double element = 0.0;
				for(int j = 0; j < Individual.defaultGeneLength; j++) {
					element = vectorReader.nextDouble();
					newPreference.add((double) element);
				}
				M_preferences.add(i, newPreference);
				i++;	
			}
		}
		
        //for (int i = 0; i < numUsers; i++) {
        	//Vector<Double> newPreference = this.readFile.readVector(sc);
        	//M_preferences.add(i, newPreference);
			//for(int j = 0; j < Individual.defaultGeneLength; j++) {
				
			//}
        //}

	
}
