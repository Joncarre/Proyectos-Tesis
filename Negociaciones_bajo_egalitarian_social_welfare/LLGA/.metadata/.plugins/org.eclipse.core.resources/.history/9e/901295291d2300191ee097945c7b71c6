package main;

import java.io.IOException;
import java.lang.management.MemoryPoolMXBean;
import java.lang.management.ThreadInfo;
import java.util.Scanner;
import java.util.Vector;

import javax.management.openmbean.OpenDataException;

import org.omg.CORBA.PRIVATE_MEMBER;

public class Engine {
	private final int average = 500;
	private final int maxGenerations = 100;
	private int preferenceIterations = 100;
	private final int populationSize = 100;
	private final int numUsers = 4;
	private FitnessCalc fitness = new FitnessCalc(this.numUsers, this.average);
	private Population myPop;
	Scanner sc = new Scanner(System.in);
	
	/**
	 * This method controls the flow of execution
	 * @throws IOException
	 */
	public void start() throws IOException {	
		String text = "49.647130575624146 62.0693916210501 20.311725158399835 5.015535509646004 60.5695568906112 96.73226257890249 51.27167387275276 85.85851069713642 43.965789422484285 69.93632209240774 39.30446166447569 95.91856857238835 74.87881059683673 15.94962707150301 74.01199388105806 18.743612482025494 79.05872775005729 40.796359170031856 76.17643725883522 3.3257104258101924 46.082172524396334 93.51618992731984 62.50548457506588 9.296986276808052 43.95667155266034 47.8765525132359 28.41439516707661 32.13498617060561 74.00573632735711 30.200528036954 51.91156418498715 24.244828410866546 49.333346443907836 20.28065684523349 7.454137789799646 84.2648726620582 7.0131887345577955 14.750335350516277 62.28381303749077 26.015946878696678 73.33841943719169 50.77958914722451 88.24019501650523 89.18112854691692 79.00193778600885 72.5508984176785 40.38020874633969 30.063833484423405 66.95503942093812 13.653326987583565 72.90677993009088 51.62643804688241 2.914057419005956 70.30961791133733 67.92865798508096 39.459940585902835 83.04994381664093 52.220993549335 76.43547477229242 94.37710344878042 57.30503894219034 67.77831819443966 72.57822437770061 48.957336361467924 18.034088949969632 55.44582365537943 93.89514941782406 7.600981799499514 5.263321126798397 39.27505637880807 84.51657780522876 38.4739896023576 64.80181071614894 29.75173643925378 99.61954711388451 19.14090740423685 25.72353560798835 91.51714711925315 27.484108183047546 98.69487934450413 30.366425125421877 29.938249529301128 75.4280345695291 69.79781111588606 40.96647399303802 52.02712418070886 37.66516188460655 64.24216485296111 52.360286373904884 20.83041835040616 82.74495779004305 50.4377374456999 85.84873771034802 99.12336313535984 51.686896236429135 34.6126311880491 26.31725997013382 66.05055975221939 23.2231044288528 17.497015477117802\r\n" + 
				"33.05500839854893 70.25706778730962 3.7062095225072778 19.83161562459454 30.405558489898347 77.04845463213789 44.226711839288626 22.20976322227421 82.41595961585271 60.207364597161025 16.315196928911682 41.522661870460325 99.02894248371994 63.27673934226495 95.27951200983784 5.631973289395439 81.08471595182532 94.39619811516002 93.745642236846 64.84208153948238 97.46421861981402 67.14824177003682 37.33325330280945 38.2863823664329 23.114903187552336 53.334753255087755 38.60296397785035 52.477685314767314 78.4530383244986 81.16193721418747 48.462214521096385 20.002340672018786 42.73318009661793 58.96314978768286 41.11013102263525 60.66086399507298 41.415938591787935 71.33427773291764 5.339123931479319 59.27493034836312 22.34928004311166 73.39507218914285 38.59197885657828 24.89126489525533 19.706614209590462 57.822587050910215 9.598008358055676 4.217498052262491 50.09650533921428 59.32911636625352 26.68042897403742 95.82326960976467 60.07437266314738 30.377260687516795 94.93937981098519 86.93187505988594 16.445636871511986 96.13852008173234 63.4710522334108 34.51348984348345 79.25275579987891 95.0094803577294 46.58329140260305 14.870468581695333 30.185255803935643 68.40103573550303 19.611451313619913 61.97851903601007 3.3422832043114035 85.01115501678511 91.42569140670906 5.514461460399376 91.8114066741381 53.38063076567414 43.051948108002186 38.762123291344295 26.405297679215497 72.21381899063483 74.00354156601794 58.44231501241055 61.119614180963374 83.72276178561177 58.93903423131811 12.961135155340674 57.440872944880525 71.1232121024511 5.1241985762896975 20.612838001966065 89.54218076699804 65.37492616106627 15.882026957017521 51.90922121355815 23.657763215047975 25.316230193779585 43.76450198629375 55.43698479126046 29.52376622974668 61.494205426621406 40.57345440753582 69.46778483905005\r\n" + 
				"49.713346647747045 2.236993816341218 76.59504752672336 61.96264934378833 20.97819490560854 88.85353743776233 83.4935923993627 88.62320382941431 52.33654749280733 52.278750784566384 74.23510607218618 80.2466454157216 24.619486496945054 83.00842354414857 49.17963619724311 17.839604516442126 96.502692622329 4.788318321241613 52.09367241263992 80.73809756889337 56.71003617101328 20.23578481455682 43.28998489981365 24.366425933031046 13.078290953923126 92.37978860003267 72.40209887514663 35.24747243340926 33.51896729253174 11.00670089055599 96.44409294434256 38.449976358308135 69.60367006238549 52.6942203822364 55.793783957772305 3.8254637893461187 39.53356840411163 6.504738860912344 36.568368665699026 16.148183455498184 55.63148873152307 24.492039813917685 86.53639978319707 95.62592327757753 76.21684297957208 71.45159171924499 8.228581035687064 39.19779416882857 9.789030975105138 45.71484578930729 39.27208944066646 87.57711743146655 55.85407987633528 23.251750761901448 83.17924935461761 48.133210104248626 98.48231724362995 34.903382039813266 52.871164493119885 93.43545489497902 37.78145752216284 34.21792337489153 5.1104762836463955 19.606184318348653 51.90994940999104 83.10833521175525 35.75470495143533 37.54597115742516 36.03963770691558 56.38893310617612 37.32270857864849 37.605630887321894 72.8046773062485 17.180739532361194 74.79157797808439 68.38373606099982 39.24531702054169 12.201780279812837 45.80986747397027 30.026697206784327 10.07067200208408 91.07866281689306 80.6253196657626 12.700430842917546 17.22368369429327 46.02963471580633 13.981357417876298 55.788398338781754 49.234445652659886 33.576907947169815 96.03636001052313 54.85031233844389 10.69479730607737 57.34744250020292 62.00336781655526 72.44896852005135 58.377399418422016 41.51645989491508 45.695053865165484 98.61977791428271\r\n" + 
				"29.056817716324467 38.036868949576046 48.490003779979226 20.018182678596034 98.96797247690519 6.48036152528182 7.410992829155004 45.6347435953684 1.0590527507945433 88.09231355978825 45.02464503672312 91.41585544276977 81.76136108975297 19.532788822392803 30.734051271927726 81.17006591949486 47.90782992070381 97.73970801906405 28.74205204606686 94.7757358223807 37.68476230482231 75.40800065856682 38.51266431168798 82.93521777000767 86.0981285042558 98.72979693249268 33.951672319832944 5.544027911841978 23.376132647204162 90.28589908151795 74.76477103115154 65.16044503295397 69.01393671154844 35.31765733205168 48.53260181043116 69.07172850340064 91.79440383970167 85.04091728482418 97.96693034123889 31.057615066523848 23.09033147836167 7.190147030372851 54.58069937161966 27.150042202380885 90.0691584459247 14.600951320550744 28.617028759629328 7.479980141140551 49.08023012104008 81.35299732393013 43.538284807406995 36.688049442715034 61.507700838075 35.803071159511425 91.67610743058233 70.35506610042559 87.71877968085357 81.73929985007692 58.786932530146665 32.4818798810164 73.427506467179 50.88269691614645 34.24472396489967 95.21492784158323 65.8283649071721 87.05107728735052 46.43379798171602 52.77458500765416 99.23203130711342 61.4829854323978 80.57935946146239 80.8979560491686 73.65719554458516 16.095658936779515 12.771951220849457 12.055946963327624 13.897822406554427 21.82114475468164 76.3043076798334 38.24648489446618 50.994442809190005 70.62860029331293 21.645189498069684 4.301443215861381 83.79091953387814 82.39837522906794 30.424529433882896 44.374406525059726 68.35490120893594 68.46484920492003 84.69781871104365 66.59955319080302 79.48051466540451 61.390182040243644 41.494955645198345 97.82900296362415 37.27612715306219 80.36987043700277 22.23982319167604 40.86667888067591";
		
		System.out.println(text.replace(".", ","));
		System.out.println("    (1) Read data \n" + "    (2) Gerenate new data");
		int op = this.sc.nextInt();
		if(op == 1) {
			System.out.println("Do you wanna analyze the data? \n" +  "    (1) Yes \n" +  "    (2) No");
			op = this.sc.nextInt();
			if(op == 1) {
				readPopulation();
			}else
				System.out.println("Bye!");
		}else 
			generatePopulation();
	}
	
	/**
	 * Read population from file and execute GA
	 * @throws IOException
	 */
	public void readPopulation() throws IOException {
		this.fitness.readPreferences();
		this.fitness.readPreferences2();
		double variation = 1;
		for(int i = 0; i < preferenceIterations; i++) {
			this.fitness.resetValues(average, numUsers);
			this.fitness.resetPopulations(average);
			for(int j = 0; j < average; j++) {
		    	this.myPop = new Population(this.populationSize, this.fitness.getNumUsers(), false);
		    	int generationCount = 0;
				while (generationCount < this.maxGenerations) {
			        generationCount++;
			        this.myPop = Algorithm.evolvePopulation(this.myPop);  
			    }
			    this.fitness.calculateMutationPopulation(this.myPop.getFittest(), i, j);
				this.fitness.calculateMutationDistribution(j);
			}
			this.fitness.writeDistribution(this.myPop.getFittest(), average, i);
			/* Modificación de recursos */
			//this.fitness.setValueBaja(0, 6, variation);
		}
		System.out.println("To be continued...");
	}
	
	/**
	 * Generate a new Population to files
	 * @throws IOException
	 */
	public void generatePopulation() throws IOException {
		System.out.println("ATENTION, new data will be generate. Press ENTER to continue");
		this.sc.nextLine(); this.sc.nextLine();
	    Population myPop = new Population(this.populationSize, this.fitness.getNumUsers(), true);
		this.fitness.randomPreferences();
		this.fitness.writePreferences();
		System.out.println("Data generated");
	}
}

