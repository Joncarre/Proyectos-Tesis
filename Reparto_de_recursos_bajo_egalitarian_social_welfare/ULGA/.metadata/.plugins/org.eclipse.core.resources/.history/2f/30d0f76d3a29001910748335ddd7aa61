package main;

import java.io.IOException;
import java.nio.file.FileAlreadyExistsException;

public class Algorithm {

    private static final double uniformRate = 0.5;
    private static final double mutationRate = 0.05;
    private static final int tournamentSize = 5;
    private static final boolean elitism = true;

    /**
     * Evolve Population
     * @param pop
     * @return
     */
    public static Population evolvePopulation(Population popEvolved) {
    	
        // Keep our best individual
        if (elitism)
        	popEvolved.saveIndividual(0, popEvolved.getFittest());

        // Crossover population
        int elitismOffset;
        if (elitism)
            elitismOffset = 1;
        else
            elitismOffset = 0;
        
        // Loop over the population size and create new individuals with crossover
        for (int i = elitismOffset; i < popEvolved.size()-1; i++) {
        	Individual indiv1 = popEvolved.getIndividual(i);
        	Individual indiv2 = popEvolved.getIndividual(i+1);
			Individual newIndiv = crossover(indiv1, indiv2);
			popEvolved.saveIndividual(i, newIndiv);
        }

        // Mutate population
        for (int i = elitismOffset; i < popEvolved.size(); i++)
            mutate(popEvolved.getIndividual(i));

        return popEvolved;
    }

    /**
     * Crossover individuals
     * @param indiv1
     * @param indiv2
     * @return
     */
    private static Individual crossover(Individual indiv1, Individual indiv2) {
        Individual newSol = new Individual();
        // Loop through genes
        for (int i = 0; i < indiv1.size(); i++) {
            // Crossover (new gen = 50% old gen of indiv1 and 50% old gen of indiv2)
            if (Math.random() <= uniformRate)
                newSol.setGene(i, indiv1.getGene(i));
            else
                newSol.setGene(i, indiv2.getGene(i));
        }
        return newSol;
    }
    
    /**
     * Crossover individuals without randomly
     * @param indiv1
     * @param indiv2
     * @return
     */
    private static Individual crossoverFixed(Individual indiv1, Individual indiv2) {
        Individual newSol = new Individual();
        boolean fixed = true;
        for (int i = 0; i < indiv1.size(); i++) {
            if (fixed) {
               newSol.setGene(i, indiv1.getGene(i));
               fixed = false;
            }
            else {
               newSol.setGene(i, indiv2.getGene(i));
               fixed = true;
            }
        }
        return newSol;
    }

    /**
     * Mutate an individual
     * @param indiv
     */
    private static void mutate(Individual indiv) {
        // Loop through genes
        for (int i = 0; i < indiv.size(); i++) {
            if (Math.random() <= mutationRate) {
                // Create random gene
                int gene = (int) Math.round(Math.random());
                indiv.setGene(i, gene);
            }
        }
    }
}