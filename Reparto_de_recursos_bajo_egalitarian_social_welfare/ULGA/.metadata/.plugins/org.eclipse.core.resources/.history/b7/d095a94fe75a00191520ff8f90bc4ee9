package AGS;

import java.io.IOException;
import java.lang.management.MemoryPoolMXBean;
import java.lang.management.ThreadInfo;
import java.util.Scanner;
import java.util.Vector;

import javax.management.openmbean.OpenDataException;

import org.omg.CORBA.PRIVATE_MEMBER;
import org.omg.PortableServer.THREAD_POLICY_ID;

import AGI.AGI_Engine;
import files.CustomReadFile;
import files.CustomWriteFile;

public class AGS_Engine {
	private final int maxGenerations;
	private final int populationSize;
	private final int numUsers;
	private AGS_FitnessCalc fitness;
	private AGS_Population myPop;
	Scanner sc;
	private CustomWriteFile writeFile;
	
	/**
	 * Constructor
	 */
	public AGS_Engine() {
		this.maxGenerations = 5000;
		this.populationSize = 30;
		this.numUsers = 4;
		this.fitness = new AGS_FitnessCalc(this.numUsers);
		this.sc = new Scanner(System.in);
	}
	
	/**
	 * This method controls the flow of execution
	 * @throws IOException
	 */
	public void start() throws IOException {
		System.out.println("    (1) Execute SGA \n" + 
						   "    (2) Gerenate new Preferences \n" +  
						   "    (3) Gerenate new Population \n" + 
						   "    (*) Exit");
		int op = this.sc.nextInt();
		if(op == 1) 
			executeSGA();
		else if(op == 2) {
			generatePreferences();
			System.exit(0);
		}else  if(op == 3) {
			generatePopulation();
			System.exit(0);
		}else
			System.out.println("Bye, Bye!");
	}
	
	/**
	 * Read population from file and execute GA
	 * @throws IOException
	 */
	public void executeSGA() throws IOException {
		String textFile = "";
		String textConsole = "";
		this.fitness.readPreferences_O();
		this.fitness.readPreferences_M();
		this.myPop = new AGS_Population();
		this.myPop.readPopulation(this.populationSize, this.numUsers);
		int generationCount = 0;
		AGI_Engine engine = new AGI_Engine();
    	engine.setO_Results();
        engine.setO_Preferences(this.fitness.getO_Preferences());
		while (generationCount < this.maxGenerations) { // Llamadas al IGA = maxGenerations x populationSize x average
			//double t_1 = System.currentTimeMillis(); 
			
			generationCount++;
			// Escribir por consola
			this.myPop = AGS_Algorithm.evolvePopulation(this.myPop, engine, populationSize);
			textConsole = myPop.getBest().getOnlyFitness() + "     " + myPop.getBest().toString()  + "\n";
			System.out.print(textConsole.replace('.', ','));	
			// Escribir en fichero
			textFile += myPop.getBest().getOnlyFitness() + "     " + myPop.getBest().toString() + "\n";
			textConsole = myPop.getBest().getOnlyFitness() + "     " + myPop.getBest().toString()  + "\n";
	
			//System.out.println("time: " + (System.currentTimeMillis() - t_1));
		}
		System.out.println("The best: " + myPop.getBest().toString());			
		System.out.println("SGA, to be continued...");
		System.out.println(textFile);
		this.writeFile = new CustomWriteFile("optimo.txt");
		this.writeFile.writeVector(this.writeFile, textFile.replace('.', ','));
		this.writeFile.closeWriteFile(this.writeFile);
	}
	
	/**
	 * Generate a new Preferences to files
	 * @throws IOException
	 */
	public void generatePreferences() throws IOException {
		System.out.println("ATENTION, new Preferences will be generate. Press ENTER to continue");
		this.sc.nextLine(); this.sc.nextLine();
		this.fitness.randomPreferences_U();
		this.fitness.randomPreferences_R();
		this.fitness.writePreferences_U();
		this.fitness.writePreferences_R();
		System.out.println("Data generated");
	}

	/**
	 * Generate a new Population to files
	 * @throws IOException
	 */
	private void generatePopulation() throws IOException {
		System.out.println("ATENTION, new Population will be generate. Press ENTER to continue");
		this.sc.nextLine(); this.sc.nextLine();
	    this.myPop = new AGS_Population(this.populationSize, this.numUsers);
		System.out.println("Data generated");
	}
}

